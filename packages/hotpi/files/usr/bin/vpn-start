#!/bin/bash.real
# Copyright Shaun Simpson 2014.
# All rights reserved.

# This script is used to control a VPN connection. 

VERSION="1.3.1-pi-dekockblock"

# Get version information
if [ -e "/etc/vpn-mode" ]; then
    SIMPLE=`cat "/etc/vpn-mode"`
fi

if [ "$SIMPLE" = "1" ]; then
  VERSION=`echo $VERSION-simple`
fi

PIDFILE="/tmp/vpn-start.pid"
VPNIF="tun0"        # VPN interface.
WLANIF="wlan0"      # Wifi hotspot interface.
LANIF="eth0"        # Ethernet internet interface.

LOCALGATEWAYIP=""   # Local gareway IP.
NETIF=""            # Network interface baing used.

IFFAILS=0           # Ping tests failed for lical interface 
FAILS=0             # Ping tests failed for internet.

# Ip addresses used to test if the VPN is working. 
# These addresses are forced through the VPN interface.
SERVERS=("4.2.2.2" "8.8.8.8" "208.67.220.220")

UPRETRYDELAY=60		# Limits attemps to reconnect the VPN.
UPRETRYTIME=`date +%s`
OVPNCONFIGDIR="/storage"
OVPNCONFIGFILE="/storage/.config/ovpn.conf"
OVPNOPTIONS=" --log /var/log/vpn-openvpn.log --resolv-retry 5 --daemon --config "

VPNCONNECTIONTIMEOUT=90 # Time to wait for connection.
VPNDISCONNECTIONTIMEOUT=10 # Time to wait for dis-connection.
VPNLOGTIME=`date +%s`
VPNLOGDELAY=600

SOUNDWINDOW=`date +%s`
SOUNDWINDOWPERIOD=180

UPDATERUNFILE="/tmp/joggler-update-file.run"

STOPONEXIT=1

# The network manager does periodic scans for WiFi stations.
# This seems to cause disconnections and module unloading.
# To prevent this stop the network_manager after the WiFi link has 
# been active for a period.
NETWORKMANAGERSTATE=0   # Assume network manager is up
KILLNETWORKMANAGER=0    # Kill NetworkManager seems to kill the hotspot on the raspberry pi.
STARTDNSMASQ=1		    # Start dnsmasq after hotspot if not started
DNSMASQCONF="/storage/.config/dnsmasq.conf"

SOUND=1                 # Sound on/off
SOUNDVOLUME="30 -softvol "	      # Sound level for audio vpn status feedback
SOUNDUSER=""               # User with sound permissions

CONFIGFILE="/etc/vpn-hotspot.conf"


ENABLED=1

# ------------- EXIT CLEANUP ------------------

function finish {
# Your cleanup code here
   if [ $STOPONEXIT = 1 ]; then
       echo "Exiting ...."
       simplevpndown
       sudo ap-hotspot stop

       # The network manager may be stopped.
       if [ $KILLNETWORKMANAGER = 1 ] && [ $NETWORKMANAGERSTATE = 0 ]; then
           startnetworkmanager
       fi
   fi
}

trap finish EXIT


# --------------- HELPER ----------------------

function readconfig () {
    if [ -f "$CONFIGFILE" ]; then
        echo "VPN-HOTSPOT: Reading config file \"$CONFIGFILE\" ..."

        VAL=`cat "$CONFIGFILE" | grep "VPN_ENABLED=0"`
        if [ "$VAL" != "" ]; then
            ENABLED=0
            echo "VPN-HOTSPOT: deactivated."
        fi

        VAL=`cat "$CONFIGFILE" | grep "SET_SOUND=0"`
        if [ "$VAL" != "" ]; then
            SOUND=0
            echo "VPN-HOTSPOT: Sounds turned off."
        fi
    fi
}

# Get the network interface.
# Call only when the VPN is down.
function getinternetinterface() {
    # Get the local gateway IP
    LOCALGATEWAYIP=`/sbin/ip route | awk '/default/ { print $3 }' | head -n1`
    NETIF=`ip route get $LOCALGATEWAYIP | awk -F"dev " 'NR==1 {split($2,a," ");print a[1]}'`
}

# The network manager does periodic scans for WiFi stations.
# This seems to cause disconnections and module unloading.
# To prevent this stop the network_manager after the link has 
# been active for a period.
function stopnetworkmanager() {
    echo "VPN HOTSPOT: Stopping network manager ..."
    service network-manager stop
    NETWORKMANAGERSTATE=0
}

# Start the network manager if the internet stops working.
function startnetworkmanager() {
    echo "VPN HOTSPOT: Starting network manager ..."
    service network-manager start
    NETWORKMANAGERTIME=`date +%s`
    NETWORKMANAGERTIME=$[NETWORKMANAGERTIME + NETWORKMANAGERDELAY]
    NETWORKMANAGERSTATE=1
}

# Test if the local gateway can be pinged.
# TEST=0 if interface can ping gateway
function interfacetest() {
    TEST=1

    if [ "$LOCALGATEWAYIP" != "" ]; then
        count=$(ping -c 2 -W 1 $LOCALGATEWAYIP | grep 'received' | awk -F',' '{ print $2 }' | awk '{ print $1 }')
        if [ "$count" -gt 0 ]; then
            TEST=0
            return
        fi

        if [ $IFFAILS = 1 ]; then
            echo "ERROR: Local gateway ping test failed $IFFAILS"
        fi
    else
        # This should never happen.
        echo "ERROR: Local gateway invalid!"
        TEST=0
    fi
}

# Test if the internet is up.
# TEST=0 if the internet is up.
function internettest() {
echo "Testing internet connectivity ..."
    TEST=1

    for SERVER in ${SERVERS[*]}
    do
        count=$(ping -c 2 -W 1 $SERVER | grep 'received' | awk -F',' '{ print $2 }' | awk '{ print $1 }')
        if [ "$count" -gt 0 ]; then
            TEST=0
echo "Internet connected."
            return
        fi
    done

echo "Internet not connected!"
}


# --------------- VPN ----------------------

function printopenvpnlog () {
    NOWTIME=`date +%s`
    if [ $NOWTIME -lt $VPNLOGTIME ]; then
        echo "OpenVPN Log: Skipped to prevent log file flooding."
    else
        echo "OpenVPN Log:"
        echo ""

        if [ -f "/var/log/vpn-openvpn.log" ]; then
          tail -n 20 "/var/log/vpn-openvpn.log"
        else
          echo "ERROR: OpenVPN log file missing."
          return
        fi

        echo ""
        echo "-------------------------------------"
        echo ""

        VPNLOGTIME=$[NOWTIME + VPNLOGDELAY] 
    fi
}

function getnewovpnconf() {
    echo "Searcing for new openvpn configuration ..."
    find $OVPNCONFIGDIR/* -name *.ovpn -prune -print | head -n 1 > /tmp/vpn-config.run
    NEWCONFIGFILE=`cat /tmp/vpn-config.run`
    if [ -f "$NEWCONFIGFILE" ]; then
        echo "Found OpenVPN configuration \"$NEWCONFIGFILE\""
        cp "$NEWCONFIGFILE" "$OVPNCONFIGFILE"
        rm "$NEWCONFIGFILE"
    else
        echo "No new configuration file found."
    fi
}

function startopenvpn () {
    if [ -d "/sys/class/net/$VPNIF" ]; then
        stopopenvpn
    fi

    while [ "true" ]
    do
        if [ -f "$OVPNCONFIGFILE" ]; then
            echo "OpenVPN: Trying to connect ..."

            openvpn $OVPNOPTIONS $OVPNCONFIGFILE

            if [ $? = 0 ]; then
                echo "OpenVPN: Successfully launched ..."
                echo "OpenVPN: Waiting for tunnel ..."

                NOWTIME=`date +%s`
                TIMEOUT=$[NOWTIME + VPNCONNECTIONTIMEOUT]
                while [ $NOWTIME -lt $TIMEOUT ] && [ ! -d "/sys/class/net/$VPNIF" ]
                do
                    sleep 1s
                    NOWTIME=`date +%s`
                done

                if [ ! -d "/sys/class/net/$VPNIF" ]; then
                    echo "OpenVPN: ERROR Failed to connect."
                    printopenvpnlog
                else
                    sleep 5
                    echo "OpenVPN: Successfully connected."
                fi
            else
                echo "OpenVPN: Failed to connect, possible configuration error."
                printopenvpnlog
            fi

        	return
        else
            echo "FATAL ERROR: No Open VPN config \".ovpn\" file found."
            echo "Please place a suitable file on the storage partition and reboot."
            echo "Retrying in 30 seconds ..."
            echo ""
            sleep 30s
            getnewovpnconf
        fi
    done
}

function stopopenvpn () {
    killall -SIGINT openvpn > /dev/null 2> /dev/null

    echo "OpenVPN: Shutting down ..."
    echo "OpenVPN: Waiting for tunnel to collapse..."

    NOWTIME=`date +%s`
    TIMEOUT=$[NOWTIME + VPNDISCONNECTIONTIMEOUT]
    while [ $NOWTIME -lt $TIMEOUT ] && [ -d "/sys/class/net/$VPNIF" ]
    do
        sleep 1s
        NOWTIME=`date +%s`
    done

    # make sure openvpn is dead
    killall -SIGKILL openvpn > /dev/null 2> /dev/null

    if [ -d "/sys/class/net/$VPNIF" ]; then
	sleep 3s
    fi

    if [ -d "/sys/class/net/$VPNIF" ]; then
        echo "OpenVPN: ERROR Failed to disconnect."
        printopenvpnlog
    else
        echo "OpenVPN: Successfully dis-connected."
    fi
}

# Returns 0 if connected.
function vpnconnected () {
    if [ ! -d "/sys/class/net/$VPNIF" ]; then
        echo 1
        return
    fi
    
    echo 0
}

# Attempt to connect to the VPN if not connected.
function simplevpnup () {
    local ret=$(vpnconnected)

    if [ "$ret" == 0 ]; then
        # test if the VPN is truly up.
        internettest
        
        if [ "$TEST" != 0 ]; then
            # VPN not working
            ret=1
        fi
    fi
    
    if [ "$ret" != 0 ]; then
        startopenvpn

        local ret=$(vpnconnected)
        
        if [ "$ret" == 0 ]; then
            success
        else
            failure
        fi
    else
        echo "VPN HOTSPOT $(date +"%m-%d %T"): VPN already connected."
        success
    fi
}

# Pull down the VPN.
function simplevpndown () {
    # Is the VPN up?
    local ret=$(vpnconnected)

    if [ "$ret" = 0 ]; then
        echo "VPN HOTSPOT $(date +"%m-%d %T"): VPN disconnecting ..."
        stopopenvpn
        echo "VPN HOTSPOT $(date +"%m-%d %T"): VPN disconnected."
    fi
}

function simplerouting () { 
    iptables -F -t nat

    iptables -t nat -A POSTROUTING -o $LANIF -j MASQUERADE
    iptables -t nat -A POSTROUTING -o $VPNIF -j MASQUERADE
    
    ip route flush cache
}


# --------------- SOUND ----------------------

function setsoundwindow () {
    NOWTIME=`date +%s`
    SOUNDWINDOW=$[NOWTIME + SOUNDWINDOWPERIOD]
}

function activesound () {
    su -c "touch /tmp/vpn-hotspot-busy.state" $SOUNDUSER

    if [ "$SOUND" -eq 1 ]; then
        killall -9 mplayer  > /dev/null 2> /dev/null
	su -c "mplayer -quiet -volume $SOUNDVOLUME /usr/share/vpn-hotspot/active.mp3 &" $SOUNDUSER > /dev/null 2> /dev/null
    fi

    setsoundwindow
}

function bypasssound () {
    su -c "touch /tmp/vpn-hotspot-success.state" $SOUNDUSER
    
    if [ "$SOUND" -eq 1 ]; then
	killall -9 mplayer  > /dev/null 2> /dev/null
        su -c "mplayer -quiet -volume $SOUNDVOLUME /usr/share/vpn-hotspot/bypass.mp3 &" $SOUNDUSER > /dev/null 2> /dev/null
    fi
    
    setsoundwindow
}

function resetsound () {
    su -c "touch /tmp/vpn-hotspot-busy.state" $SOUNDUSER
    
    if [ "$SOUND" -eq 1 ]; then
	killall -9 mplayer > /dev/null 2> /dev/null
        su -c "mplayer -quiet -volume $SOUNDVOLUME /usr/share/vpn-hotspot/reset.mp3" $SOUNDUSER > /dev/null 2> /dev/null
    fi

    setsoundwindow
}

function success () {
    NOWTIME=`date +%s`
    if [ $NOWTIME -lt $SOUNDWINDOW ]; then
        su -c "touch /tmp/vpn-hotspot-success.state" $SOUNDUSER

        if [ "$SOUND" -eq 1 ]; then
	    echo "SOUND: Success"
	    killall -9 mplayer  > /dev/null 2> /dev/null
            su -c "mplayer -quiet -volume $SOUNDVOLUME /usr/share/vpn-hotspot/success.mp3" $SOUNDUSER > /dev/null 2> /dev/null
        fi
    fi
}

function failure () {
    NOWTIME=`date +%s`
    if [ $NOWTIME -lt $SOUNDWINDOW ]; then
        su -c "touch /tmp/vpn-hotspot-failure.state" $SOUNDUSER
        if [ "$SOUND" -eq 1 ]; then
            echo "SOUND: Failure"
            killall -9 mplayer  > /dev/null 2> /dev/null
            su -c "mplayer -quiet -volume $SOUNDVOLUME /usr/share/vpn-hotspot/failure.mp3" $SOUNDUSER > /dev/null 2> /dev/null
        fi
        SOUNDWINDOW=$NOWTIME
    fi
}



#--------------- MAIN -----------------

# Test if script already running
if [ -f "$PIDFILE" ] && kill -0 `cat $PIDFILE` 2>/dev/null; then
    echo "VPN HOTSPOT: Exiting, process already started."
    STOPONEXIT=0
    exit 1
fi
echo $$ > $PIDFILE

echo "VPN HOTSPOT: NEW SESSION: vpn-start $(date)"
echo "VPN HOTSPOT: Version $VERSION"
readconfig

if [ $ENABLED = 0 ]; then
    echo "VPN HOTSPOT: Halted."
    exit 0;
fi

if [ -f "$UPDATERUNFILE" ]; then
    echo "VPN HOTSPOT: Waiting up to 3 minutes for update to complete ..."

    TIMENOW=`date +%s`
    TIMEOUT=$[TIMENOW + 180]

    while [ -f "$UPDATERUNFILE" ] &&  [ $TIMENOW -lt $TIMEOUT ]
    do
        sleep 1s
        TIMENOW=`date +%s`
    done
fi

touch /tmp/vpn-start.run

if [ -f /tmp/vpn-hotspot-bypass.run ]; then
    rm /tmp/vpn-hotspot-bypass.run
fi

# Prevent power management turning off WiFi
if [ -e /sys/class/net/wlan0/power/control ]; then
    echo "VPN HOTSPOT: Disabling wlan0 WiFi power management ..."
    echo on > /sys/class/net/wlan0/power/control
fi

if [ -e /sys/class/net/wlan1/power/control ]; then
    echo "VPN HOTSPOT: Disabling wlan1 WiFi power management ..."
    echo on > /sys/class/net/wlan1/power/control
fi

if [ $KILLNETWORKMANAGER != 0 ]; then
    echo "VPN HOTSPOT: Killing NetworkManager ..."

    stopnetworkmanager
fi

# Check if the VPN interface is up.
if [ -d "/sys/class/net/$VPNIF" ]; then
    echo "VPN HOTSPOT: Disconnecting exsisting VPN ..."
    vpndown
fi

echo "VPN HOTSPOT: Waiting for internet connection ..."
TEST=1
while [ $TEST -gt 0 ]
do
    sleep 1s
    internettest
done

if [ "$STARTDNSMASQ" == 1 ]; then
    if [ "$(pidof dnsmasq)" ]; then
        echo "VPN HOTSPOT: dnsmasq already started."
    else
        echo "VPN HOTSPOT: Starting dnsmasq."
        
        if [ "$DNSMASQCONF" == "" ]; then
            dnsmasq
        else
            dnsmasq --conf-file="$DNSMASQCONF"
        fi
    fi
fi

getinternetinterface
echo "VPN HOTSPOT: Network Interface $NETIF"
echo "VPN HOTSPOT: Local Gateway $LOCALGATEWAYIP"

simplerouting

while [ "true" ]
do
    # VPN active: Turn on the VPN.
    if [ -f /tmp/vpn-hotspot-active.run ]; then
        echo "COMMAND $(date +"%m-%d %T"): VPN active command."
        activesound
        simplevpnup
        simplerouting
        rm /tmp/vpn-hotspot-active.run
        VPNSTATE="on"
    fi

    # VPN bypass: Pull down the vpn.
    if [ -f /tmp/vpn-hotspot-bypass.run ]; then
        echo "COMMAND $(date +"%m-%d %T"): VPN bypass command."
        simplevpndown
        simplerouting
        echo "VPN down."
        rm /tmp/vpn-hotspot-bypass.run
        VPNSTATE="off"
        bypasssound
    fi

    sleep 1
done



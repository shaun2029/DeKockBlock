stuff ported from u-boot-imx6-e817fa3

diff --git a/include/configs/tbs2910.h b/include/configs/tbs2910.h
index 0dc4a28..31adfb3 100644
--- a/include/configs/tbs2910.h
+++ b/include/configs/tbs2910.h
@@ -11,6 +11,19 @@
 
 #include "mx6_common.h"
 
+#undef CONFIG_BOOTDELAY
+#define CONFIG_BOOTDELAY        1
+
+#define CONFIG_FS_FAT
+#define CONFIG_FS_EXT4
+/*#define CONFIG_CMD_FS_GENERIC*/			/* Generic load commands */
+/*#define CONFIG_CMD_BOOTZ*/				/* bootz zImage support */
+#define CONFIG_SUPPORT_RAW_INITRD		/* bootz raw initrd support */
+/*#define CONFIG_CMD_EXT2*/
+/*#define CONFIG_CMD_EXT4*/
+/*#define CONFIG_CMD_FAT*/
+#define CONFIG_DOS_PARTITION
+
 /* General configuration */
 #define CONFIG_SYS_THUMB_BUILD
 
@@ -151,36 +164,133 @@
 #define CONFIG_ENV_OVERWRITE
 
 #define CONFIG_EXTRA_ENV_SETTINGS \
-	"bootargs_mmc1=console=ttymxc0,115200 di0_primary console=tty1\0" \
-	"bootargs_mmc2=video=mxcfb0:dev=hdmi,1920x1080M@60 " \
-			"video=mxcfb1:off video=mxcfb2:off fbmem=28M\0" \
-	"bootargs_mmc3=root=/dev/mmcblk0p1 rootwait consoleblank=0 quiet\0" \
-	"bootargs_mmc=setenv bootargs ${bootargs_mmc1} ${bootargs_mmc2} " \
-			"${bootargs_mmc3}\0" \
-	"bootargs_upd=setenv bootargs console=ttymxc0,115200 " \
-			"rdinit=/sbin/init enable_wait_mode=off\0" \
-	"bootcmd_mmc=run bootargs_mmc; mmc dev 2; " \
-			"mmc read 0x10800000 0x800 0x4000; bootm 0x10800000\0" \
-	"bootcmd_up1=load mmc 1 0x10800000 uImage\0" \
-	"bootcmd_up2=load mmc 1 0x10d00000 uramdisk.img; " \
-			"run bootargs_upd; " \
-			"bootm 0x10800000 0x10d00000\0" \
-	"console=ttymxc0\0" \
-	"fan=gpio set 92\0" \
-	"set_con_serial=setenv stdout serial; " \
-			"setenv stderr serial;\0" \
-	"set_con_hdmi=setenv stdout serial,vga; " \
-			"setenv stderr serial,vga;\0" \
-	"stderr=serial,vga;\0" \
-	"stdin=serial,usbkbd;\0" \
-	"stdout=serial,vga;\0"
+	"zImage=KERNEL\0" \
+	"script=boot.scr\0" \
+	"uimage=uImage\0" \
+	"fdt_file=imx6q-tbs2910.dtb\0" \
+	"fdt_addr=0x18000000\0" \
+	"boot_fdt=try\0" \
+	"ip_dyn=yes\0" \
+	"console=ttymxc0,115200\0" \
+	"optargs=\0" \
+	"video=\0" \
+	"fdt_high=0xffffffff\0"	  \
+	"initrd_high=0xffffffff\0" \
+	"mmcdev=" __stringify(CONFIG_SYS_MMC_ENV_DEV) "\0" \
+	"mmcpart=1\0" \
+	"update_sd_firmware=" \
+		"if test ${ip_dyn} = yes; then " \
+			"setenv get_cmd dhcp; " \
+		"else " \
+			"setenv get_cmd tftp; " \
+		"fi; " \
+		"if mmc dev ${mmcdev}; then "	\
+			"if ${get_cmd} ${update_sd_firmware_filename}; then " \
+				"setexpr fw_sz ${filesize} / 0x200; " \
+				"setexpr fw_sz ${fw_sz} + 1; "	\
+				"mmc write ${loadaddr} 0x2 ${fw_sz}; " \
+			"fi; "	\
+		"fi\0" \
+	"mmcroot=/dev/mmcblk0p2 ro\0" \
+	"mmcrootfstype=ext4 rootwait fixrtc\0" \
+	"mmcargs=setenv bootargs console=${console}" \
+		"${optargs} " \
+		"root=${mmcroot} " \
+		"rootfstype=${mmcrootfstype} " \
+		"video=${video}\0" \
+	"loadbootscript=" \
+		"fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${script};\0" \
+	"bootscript=echo Running bootscript from mmc ...; " \
+		"source\0" \
+	"loadbootenv=" \
+		"load mmc ${mmcdev}:${mmcpart} ${loadaddr} uEnv.txt;\0" \
+	"importbootenv=echo Importing environment from mmc (uEnv.txt)...; " \
+		"env import -t ${loadaddr} ${filesize}\0" \
+	"loaduimage=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${uimage}\0" \
+	"loadzimage=load mmc ${mmcdev}:${mmcpart} ${loadaddr} ${zImage}\0" \
+	"loadfdt=load mmc ${mmcdev}:${mmcpart} ${fdt_addr} ${fdt_file}\0" \
+	"mmcboot=echo Booting from mmc ...; " \
+		"run mmcargs; " \
+		"if test ${boot_fdt} = yes || test ${boot_fdt} = try; then " \
+			"if run loadfdt; then " \
+				"bootz ${loadaddr} - ${fdt_addr}; " \
+			"else " \
+				"if test ${boot_fdt} = try; then " \
+					"bootz; " \
+				"else " \
+					"echo WARN: Cannot load the DT; " \
+				"fi; " \
+			"fi; " \
+		"else " \
+			"bootz; " \
+		"fi;\0" \
+	"netargs=setenv bootargs console=${console},${baudrate} " \
+		"root=/dev/nfs " \
+		"ip=dhcp nfsroot=${serverip}:${nfsroot},v3,tcp\0" \
+	"netboot=echo Booting from net ...; " \
+		"run netargs; " \
+		"if test ${ip_dyn} = yes; then " \
+			"setenv get_cmd dhcp; " \
+		"else " \
+			"setenv get_cmd tftp; " \
+		"fi; " \
+		"${get_cmd} ${uimage}; " \
+		"if test ${boot_fdt} = yes || test ${boot_fdt} = try; then " \
+			"if ${get_cmd} ${fdt_addr} ${fdt_file}; then " \
+				"bootz ${loadaddr} - ${fdt_addr}; " \
+			"else " \
+				"if test ${boot_fdt} = try; then " \
+					"bootz; " \
+				"else " \
+					"echo WARN: Cannot load the DT; " \
+				"fi; " \
+			"fi; " \
+		"else " \
+			"bootz; " \
+		"fi;\0"
 
 #define CONFIG_BOOTCOMMAND \
-	"mmc rescan; " \
-	"if run bootcmd_up1; then " \
-		"run bootcmd_up2; " \
+	"echo; " \
+	"echo SD/MMC device set to ${mmcdev} but checking 0, 1 and 2; " \
+	"setenv mmcdevold ${mmcdev}; " \
+	"setenv mmcdev 0; " \
+	"echo Checking mmc dev ${mmcdev} (microSD card);" \
+	"mmc dev ${mmcdev};" \
+	"if mmc rescan && run loadbootenv; then " \
 	"else " \
-		"run bootcmd_mmc; " \
-	"fi"
+	  "setenv mmcdev 1; " \
+	  "echo Checking mmc dev ${mmcdev} (SD card);" \
+	  "mmc dev ${mmcdev};" \
+	  "if mmc rescan && run loadbootenv; then " \
+	  "else " \
+	    "setenv mmcdev 2; " \
+	    "echo Checking mmc dev ${mmcdev} (internal eMMC);" \
+	    "mmc dev ${mmcdev};" \
+	    "if mmc rescan && run loadbootenv; then " \
+	    "else " \
+	      "echo No SD/MMC with uEnv.txt found on device 0 to 2;" \
+	      "setenv mmcdev ${mmcdevold}; " \
+	    "fi; " \
+	  "fi; " \
+	"fi; " \
+	"setenv mmcdevold; " \
+	"echo; " \
+	"echo Using SD/MMC device ${mmcdev};" \
+	"mmc dev ${mmcdev};" \
+	"if mmc rescan; then " \
+		"echo SD/MMC found on device ${mmcdev};" \
+		"if run loadbootenv; then " \
+			"run importbootenv;" \
+		"fi;" \
+		"echo Checking if uenvcmd is set ...;" \
+		"if test -n $uenvcmd; then " \
+			"echo Running uenvcmd ...;" \
+			"run uenvcmd;" \
+		"fi;" \
+		"echo Running default loadzimage ...;" \
+		"if run loadzimage; then " \
+			"run mmcboot;" \
+		"fi;" \
+	"fi;"
 
 #endif			       /* __TBS2910_CONFIG_H * */
